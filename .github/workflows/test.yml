name: Test

on:
  issue_comment:
    types: [created]

jobs:
  read_comment:
    if: ${{ github.event.issue.pull_request && startsWith(github.event.comment.body, '/ut') }}
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.set-apps.outputs.apps }}
      # should_build_pkgs: ${{ steps.set-apps.outputs.should_build_pkgs }}
    steps:
      - name: Deploy information
        id: set-apps
        shell: bash
        env:
          COMMENT: ${{ github.event.comment.body }}
        run: |
          # if [[ "$COMMENT" == "/ut" ]]; then
          #   apps=$(find src -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
          # else
          #   # Strip /ut from the slash command to get list of apps
          #   apps=(${COMMENT:4})
          # fi

          apps=$(find src -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)

          # should_build_pkgs=()

          # for app in "${apps[@]}"
          # do
          #   if [[ "$app" == "api" || "$app" == "auth" || "$app" == "global-settings" || "$app" == "util" ]]; then
          #     should_build_pkgs+=(false)
          #   else
          #     should_build_pkgs+=(true)
          #   fi
          # done

          apps_json=$(printf '%s\n' "${apps[@]}" | jq -R . | jq -s .)
          echo $apps_json
          # should_build_pkgs_json=$(printf '%s\n' "${should_build_pkgs[@]}" | jq -R . | jq -s .)
          echo "apps=$apps_json" >> $GITHUB_OUTPUT
          # echo "should_build_pkgs=$should_build_pkgs_json" >> $GITHUB_OUTPUT

  build:
    needs: read_comment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.read_comment.outputs.apps) }}
        # should_build_pkgs: ${{ fromJson(needs.read_comment.outputs.should_build_pkgs) }}

    steps:
      - name: Display the current app and build setting
        run: |
          echo "App: ${{ matrix.app }}"
          # echo "Should Build Packages: ${{ matrix.should_build_pkgs }}"
